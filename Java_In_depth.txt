JVM is platform dependent as we install a JVM specific to a platform like Windows and it helps in interpreting the platform independent 
Java bytecode that is generated by the Java compiler.


Can you please specify what are programming languages which are compiled to another programming languages? (Related to lecture on 
Compilation)

ClojureScript (https://clojurescript.org) is one such language (a slight variant of Clojure) and it comes with a compiler that compiles 
its programs into Java Script. It looks like there are not many tools that do such translations. Such compilers are also referred to as 
source-to-source compilers or transcompilers.

Also FYI, Clojure is also a language, whose programs once compiled run on JVM ~ the platform on which Java programs run and is covered in 
detail in this course.

Web containers like Tomcat also convert JSPs code into Servlet source code before compiling them into class file. Since we are learning 
about Java in this course, you may not be aware of JSPs & Servlets, which fall under Java EE. But, just keep in mind that there is source 
code to source code translation happening (from JSP to Servlet). But, Web container like Tomcat is not a compiler. It is more of a Web 
server, but can do some code translation + compiling translated code.

P.S. We discuss JSPs & Servlets briefly towards the end of the course in a separate section.

Q2. Why a single file cannot have more than one public class?

public is a keyword that comes into play when we are dealing with the concept of package, which is introduced later in section 5. Don't 
worry if this answer is confusing as package concept is not yet discussed and you can revisit this answer later once you learn about 
packages. But, here is some explanation, which may be helpful. packages help in organizing classes in a meaningful way. Classes in one 
package share some common properties. For e.g., classes in java.io package are related to doing some input-output operation like reading 
from a file. Think of them as directories on file system (e.g., songs directory hold songs). When classes are declared as public, it means
 they are accessible to classes in other packages so that their functionality can be used.



Now, let's see what problem we may have when a single file can have two public classes, which is not allowed in Java. Let's assume we have
 two public classes Y & Z in a file named Y.java in package p1. Let's also assume a class X in a different package p2 is using the class Z
 that is inside Y.java (in package p1). Now, when we compile X, the compiler first tries to locate Z.class in package p1 and if it cannot 
 find it, then it tries to locate Z.java in package p1 so that it can compile it automatically. But, since we only have Y.java, the class 
 Z cannot be located and hence we get a compilation error saying that class Z could not be found. So, for this to work we need to place 
 the public class Z in its own file Z.java. So, a single file can have only one public class. Also, note that if class Z was not public, 
 then it cannot even be accessed by class X in package p2.



Binary format after Java 7.



package MyBrushUp;

class BasicsDemo {
    // Adapted from http://www.ntu.edu.sg/home/ehchua/programming/java/J1a_Introduction.html
	static int computeCount;
	  
    int id;
	  String name;
	  String gender;
	  int age;
	  long phone;	  
	  double gpa;	  
	  char degree;
	  
	  boolean international;
	  double tuitionFees = 12000.0;
	  double internationalFees = 5000.0;
	
	  void compute() {	
 	      computeCount = computeCount + 1;
		  int nextId = id + 1;		  
		  
		  if (international) {
		      tuitionFees = tuitionFees + internationalFees;
		  }
		
	      System.out.println("\nid: " + id);
		  System.out.println("nextId: " + nextId);
		  System.out.println("name: " + name);
		  System.out.println("gender: " + gender);
		  System.out.println("age: " + age);
		  System.out.println("phone: " + phone);
		  System.out.println("gpa: " + gpa);
		  System.out.println("degree: " + degree);
		  System.out.println("tuitionFees: " + tuitionFees);
		  System.out.println("computeCount: " + computeCount);
	  }
	  
	
	  public static void main(String[] args) {
		  BasicsDemo student1 = new BasicsDemo();
		  student1.id = 1000;	
	      student1.name = "John";
	      student1.gender = "male";
	      student1.age = 18;
	      student1.phone = 223_456_7890L;	  
	      student1.gpa = 3.8;	  
	      student1.degree = 'B';	  
	      student1.international = false;
		  student1.compute();
		  
		  BasicsDemo student2 = new BasicsDemo();
		  student2.id = 1001;	
	      student2.name = "Raj";
	      student2.gender = "male";
	      student2.age = 21;
	      student2.phone = 223_456_9999L;	  
	      student2.gpa = 3.4;	  
	      student2.degree = 'M';	  
	      student2.international = true;
		  student2.compute();
		  
		  BasicsDemo student3 = new BasicsDemo();
		  student3.id = 1002;
		  student3.name = "Anita";
		  student3.gender = "female";
		  student3.age = 20;
		  student3.phone = 223_456_8888L;
		  student3.gpa = 4.0;
		  student3.degree = 'M';
		  student3.international = true;
		  student3.compute();
		  
		  System.out.println("Student.computeCount: " + BasicsDemo.computeCount);
	  }
}



class CustomerOrder {

static int orderNumber=1000;
	
	double price = 10.0;
	double seniorDiscount = 2.0;
	int quantity=1;
	boolean seniorCitizen = false;
	double orderAmount=0.0;
	
	    
		public void generateOrderBill() {
			// TODO Auto-generated method stub
			orderNumber=orderNumber+1;
			
			
				    if(seniorCitizen==true){
					orderAmount=(quantity*price)-2;
				    }
				    
				    else
				    {
				        orderAmount=(quantity*price);
				    }
				
		}
		
			
		
}



  class BasicsDemo {
    // Adapted from http://www.ntu.edu.sg/home/ehchua/programming/java/J1a_Introduction.html
    static void print() {
      System.out.println("\n\nInside print ...");
      System.out.println("Hello, world!!"); // Advance cursor to beginning of next line
      System.out.println();                 // Print empty line
      System.out.print("Hello, world!!");   // Cursor stayed after the printed string
      System.out.println("Hello,");
      System.out.print(" ");                // Print a space
      System.out.print("world!!");
    }
	
	static void primitives() {
	  System.out.println("\n\nInside primitives ..."); 
	  // literals demo
	  int intHex = 0x0041;
	  System.out.println("intHex: " + intHex);
	  int intBinary = 0b01000001;
	  System.out.println("intBinary: " + intBinary);
	  int intChar = 'A'; // holds decimal equivalent, which is 65
	  System.out.println("intChar: " + intChar);
	  int intUnderscore = 1_23_456;
	  System.out.println("intUnderscore: " + intUnderscore);
	  
	  char charA = 'A';
	  System.out.println("charA: " + charA);
	  char charInt = 65;
	  System.out.println("charInt: " + charInt);
	  char charUnicode1 = '\u0041'; // 4 * (16 power 1 )+ 1 * (16 power 0)
	  System.out.println("charUnicode1: " + charUnicode1);
	  char charUnicode2 = 0x41;     // 4 * (16 power 1 )+ 1 * (16 power 0)
	  System.out.println("charUnicode2: " + charUnicode2);
	  char charBinary = 0b01000001; // binary corresponding to decimal 65
	  System.out.println("charBinary: " + charBinary);	  		  	  
    }
  
    static void typeCasting() {
      System.out.println("\nInside typeCasting ...");
      // Explicit casting
      long y = 42;
      //int x = y;
      int x = (int)y;
      
      // Information loss due to out-of-range assignment
      byte narrowdByte = (byte)123456;
	  System.out.println("narrowdByte: " + narrowdByte); 
	  
	  // Truncation
	  int iTruncated = (int)0.99;
	  System.out.println("iTruncated: " + iTruncated); 
	  
	  // Implicit cast (int to long)
	  y = x;
	  
	  // Implicit cast (char to int)
	  char cChar = 'A';
	  int iInt = cChar; 
	  System.out.println("iInt: " + iInt);
	  
	  // byte to char using an explicit cast
	  byte bByte = 65;
	  cChar = (char)bByte; // special conversion (widening from byte --> int followed by narrowing from int --> char)
	  System.out.println("cChar: " + cChar);
    }
	
	public static void main(String[] args) {	
	  // Language Basics 1
	  //print();				
	  //primitives();
	  typeCasting(); 
    }       
  }
  
  
  
  
package MyBrushUp;

package MyBrushUp;

public class CurrencyConvertor {

	/*int rupee=63;
	int dirham = 3;
	int real = 3;
	int chilean_peso= 595;
	int mexican_peso = 18;
	int _yen = 107;
	int $australian_dollar = 2;*/
	double exchangeRates[] = new double[] {63.0,3.0,3.0};
	public void printCurrencies() {
		/*System.out.println("dirham: " + dirham);
		System.out.println("real: " + real);
		System.out.println("chilean_peso: " + chilean_peso);
		System.out.println("rupee: " + rupee);
		System.out.println("mexican_peso: " + mexican_peso);
		System.out.println("_yen: " + _yen);
		System.out.println("$australian_dollar: " + $australian_dollar);*/
		for(int i=0;i<exchangeRates.length;i++)	{
			System.out.println(exchangeRates[i]);
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		CurrencyConvertor cc = new CurrencyConvertor();
		
		
		

		cc.printCurrencies();
		
	}

}





2-D Array

int[] myArray = new int[4][2];
type[] myArray



a) Accessibility from Static Methods:

Cannot directly access instance variables/methods defined in the same class as the static method

Can directly access static variables/methods defined in the same class

Can access anything via an object reference. So, from a static method by using an object reference, we can access instance 
variables/methods

b) Accessibility from Instance Methods:

Can access anything from an instance method. So, we can even access static variables/methods defined in the same class as the instance 
method.



package Mymethods;
 	
public class CurrencyConverterMethods {
    
    // Currency exchange rates of different currencies relative to 1 US dollar
    static double[] exchangeRates;
	
	void setExchangeRates(double[] rates) {
		exchangeRates = rates;
	}
	
	void updateExchangeRate(int countryIndex, double newVal) {
		exchangeRates[countryIndex] = newVal;
	}
	
	double getExchangeRate(int countryIndex) {
		return exchangeRates[countryIndex];
	}
	
	double computeTransferAmount(int countryIndex, double amount) {
		return amount * getExchangeRate(countryIndex);
	}
	
	double computeTransferFee(int countryIndex, double amount) {
		return (amount * getExchangeRate(countryIndex))*0.02;
	}
   
    static void printCurrencies() {
	     System.out.println("\nrupee: " + exchangeRates[0]);
	     System.out.println("dirham: " + exchangeRates[1]);
	     System.out.println("real: " + exchangeRates[2]);
	     System.out.println("chilean_peso: " + exchangeRates[3]);
	     System.out.println("mexican_peso: " + exchangeRates[4]);
	     System.out.println("_yen: " + exchangeRates[5]);
	     System.out.println("$australian: " + exchangeRates[exchangeRates.length-1]);
    }
	   
    public static void main(String[] args) {
	     CurrencyConverterMethods cc = new CurrencyConverterMethods();
		 
		 // Jan 1st
		 double[] rates = {63.0, 3.0, 3.0, 595.5, 18.0, 107.0, 2.0};
		 cc.setExchangeRates(rates);
		 
	     CurrencyConverterMethods.printCurrencies();
		 
		 rates = new double[]{65.0, 5.0, 3.0, 595.5, 18.0, 107.0, 2.0};
		 cc.setExchangeRates(rates);
		 
	     CurrencyConverterMethods.printCurrencies();
		 
		 cc.updateExchangeRate(0, 66.0);
		 CurrencyConverterMethods.printCurrencies();
		 
		 double amount = cc.computeTransferAmount(0, 1000);
		 System.out.println("\nTransferred amount: " + amount);
		 
		 double fee = cc.computeTransferFee(0, 1000);
		 System.out.println("\nTransferred fee: " + fee);
    }
}



Here is brief summary on varargs parameter that we discussed in previous lecture.

We can declare a method with a varargs parameter if the method's last parameter (or the only parameter) is an array, but we want to 
provide the invoker of the method with a flexible way of invoking it, such as:

(i) by passing an array,

(ii) providing comma-separated values, or

(iii) passing nothing at all.

So, if one invoker of this method has a large array to pass, then the array can be passed directly. Similarly, if another invoker has just
 few values to pass, then they can be passed simply as comma-separated values instead of creating an array for those values and passing 
 the array. Essentially, varargs parameter provides a flexible way for invoking a method and applies to only those methods whose last 
 parameter is an array.


Tommake use of instance variables using this keyword. currently it was using local variables.
  
  class Student {
      static int studentCount;
	  
      int id;
	  String name;
	  String gender;
	  int age;
	  long phone;	  
	  double gpa;	  
	  char degree;
	  
	  boolean international;
	  double tuitionFees = 12000.0;
	  double internationalFees = 5000.0;
	  
	  Student(int id, String name, String gender, int age, long phone, double gpa, 
					char degree) {		  
	      this(id, name, gender, age, phone, gpa, degree, false);
	  }
	  
	  Student(int id, String name, String gender, int age, long phone, double gpa, 
					char degree, boolean international) {
		  this.id = id;
		  this.name = name;
		  this.gender = gender;
		  this.age = age;
		  this.phone = phone;
		  this.gpa = gpa;
		  this.degree = degree;
		  this.international = international;
		  
		  studentCount = studentCount + 1;
		  int nextId = id + 1;		  
		  
		  if (international) {
		      tuitionFees = tuitionFees + internationalFees;
			  //return;
		  }	
		  
	      System.out.println("\nid: " + this.id);
		  System.out.println("nextId: " + nextId);
		  System.out.println("name: " + this.name);
		  System.out.println("gender: " + this.gender);
		  System.out.println("age: " + this.age);
		  System.out.println("phone: " + this.phone);
		  System.out.println("gpa: " + this.gpa);
		  System.out.println("degree: " + this.degree);
		  System.out.println("tuitionFees: " + tuitionFees);
		  System.out.println("studentCount: " + studentCount);
	  }
	  
	  Student() {}
	  
	  boolean updateProfile(String name) {
	      this.name = name;
		  return true;
	  }
	

	  public static void main(String[] args) {
	      Student student1 = new Student(1000, "Joan", "male", 18, 223_456_7890L, 3.8, 'B');
		  
		  Student student2 = new Student(1001, "Raj", "male", 21, 223_456_9999L, 3.4, 'M', true);
		  
		  Student student3 = new Student(1002, "Anita", "female", 20, 223_456_8888L, 4.0, 'M', true);
		  
		  System.out.println("\nStudent.studentCount: " + Student.studentCount);
		  
		  System.out.println("\nName of student 1: " + student1.name);
		  System.out.println("Name of student 2: " + student2.name);
		  System.out.println("Name of student 3: " + student3.name);
		  
		  student1.updateProfile("John");
		  System.out.println("\nUpdated name of student 1: " + student1.name);
	  }
  }
  
  



Few students got an error when executing StudentTest in last lecture. The program was executed as 'java StudentTest.java', which led to following error and below is my explanation for this.

Exception in thread "main" java.lang.IllegalAccessError: failed to access class Student from class StudentTest (Student is in unnamed module of loader 'app'; StudentTest is in unnamed module of loader com.sun.tools.javac.launcher.Main$MemoryClassLoader @473b46c3)
 
at StudentTest.main(StudentTest.java:3)


Here java was used rather than javac. So, it should be:

javac StudentTest.java (compilation)

java StudentTest (execution -- no .java extension)

The above issue seems to be due to unintentional execution of java StudentTest.java (here .java extension is included). However, from Java 11, this particular command will still work and will both compile the code and will execute it in one step. Compilation will happen in memory and so will not generate a .class like the way we see in the lectures. However, this command works only if the class does not use any other class. In this case, StudentTest is using Student and so it will not work as seen above. This new feature just helps in avoiding a separate compilation step and hence saves little bit of time. Will perhaps include a lecture later on this, but not a priority for now. Thanks.





  
  class Student {
      static int studentCount;
	  
      int id;
	  String name;
	  String gender;
	  int age;
	  long phone;	  
	  double gpa;	  
	  char degree;
	  
	  boolean international;
	  double tuitionFees = 12000.0;
	  double internationalFees = 5000.0;
	  
	  Student(int newId, String newName, String newGender, int newAge, long newPhone, double newGpa, 
					char newDegree) {		  
	      this(newId, newName, newGender, newAge, newPhone, newGpa, newDegree, false);		  
	  }
	  
	  Student(int id, String name, String gender, int age, long phone, double gpa, 
					char degree, boolean international) {
		  this.id = id;
		  this.name = name;
		  this.gender = gender;
		  this.age = age;
		  this.phone = phone;
		  this.gpa = gpa;
		  this.degree = degree;
		  this.international = international;
		  
		  studentCount = studentCount + 1;
		  int nextId = id + 1;		  
		  
		  if (international) {
		      tuitionFees = tuitionFees + internationalFees;
			  //return;
		  }	
		  
	     /* System.out.println("\nid: " + this.id);
		  System.out.println("nextId: " + nextId);
		  System.out.println("name: " + this.name);
		  System.out.println("gender: " + this.gender);
		  System.out.println("age: " + this.age);
		  System.out.println("phone: " + this.phone);
		  System.out.println("gpa: " + this.gpa);
		  System.out.println("degree: " + this.degree);
		  System.out.println("tuitionFees: " + tuitionFees);
		  System.out.println("studentCount: " + studentCount);*/
	  }
	  
	  Student() {}
	  
	  boolean updateProfile(String name) {
	      this.name = name;
		  return true;
	  }

	  
  }
  
  
  
  
  
  
  class StudentTest {
      public static void main(String[] args) {
	      Student student1 = new Student(1000, "Joan", "male", 18, 223_456_7890L, 3.8, 'B');
		  
		  Student student2 = new Student(1001, "Raj", "male", 21, 223_456_9999L, 3.4, 'M', true);
		  
		  Student student3 = new Student(1002, "Anita", "female", 20, 223_456_8888L, 4.0, 'M', true);
		  
		  System.out.println("\nStudent.studentCount: " + Student.studentCount);
		  
		  System.out.println("\nName of student1: " + student1.name);
		  System.out.println("Name of student2: " + student2.name);
		  System.out.println("Name of student3: " + student3.name);	 

          student1.updateProfile("John");
		  System.out.println("Updated name of student1: " + student1.name);		

          /*Student student4 = student1;
		  System.out.println("\nName of student4: " + student4.name);
		  
		  student4.updateProfile("Mike");
		  System.out.println("Name of student1: " + student1.name);
		
		  student4 = student2;
		  System.out.println("Name of student4: " + student4.name);
		
		  student2 = student1;
		  System.out.println("Name of student4: " + student4.name);
		  System.out.println("Name of student2: " + student2.name);
		
		  student4 = new Student();
		  student4.updateProfile("Alex");
		  System.out.println("Name of student4: " + student4.name);
		  System.out.println("Name of student2: " + student2.name);
		  System.out.println("Name of student1: " + student1.name);	*/  
		  
		  Student[] students = {student1, student2, student3};
		  
		  swap(students, 0, 2);
		  
		  System.out.println("\nName of student1: " + students[0].name);
		  System.out.println("Name of student2: " + students[1].name);
		  System.out.println("Name of student3: " + students[2].name);	
	  }
	  
	  static void swap(Student[] students, int firstIndex, int secondIndex) {
	      Student temp = students[firstIndex];
		  students[firstIndex] = students[secondIndex];
		  students[secondIndex] = temp;
	  }
  }
  
  
  
class Instructor {
	public long id;
	public String name;
	public String title;
	public String department;
	public Book[] books;
	
	public Instructor(long id, String name, String title, String department, Book[] books) {
		this(id, name, title, department);
		this.books = books;
	}
	
	public Instructor(long id, String name, String title, String department) {
		this(id, name, title);
		this.department = department;
	}
	
	public Instructor(long id, String name, String title) {
		this(id, name);
		this.title = title;
	}
	
	public Instructor(long id, String name) {
		this.id = id;
		this.name = name;
	}
	
	public String getMostRecentBookTitle() {
		return books[books.length-1].getTitle();
	}
	
	public Book updateBook(int index, String title) {
		Book oldBook = new Book();
		oldBook.setTitle(books[index].getTitle());
		
		books[index].setTitle(title);	
		
		return oldBook;
	}
	
	public Book updateBook(int index, Book book) {
		Book oldBook = books[index];		
		books[index] = book;
		return oldBook;
	}
	
	public static void main(String[] args) {
		Book book1 = new Book("Java");
		Book book2 = new Book("Java Script");
		Book book3 = new Book("Python");
		
		Instructor instructor = new Instructor(101, "John", "Assistant Professor", "Computer Science", new Book[]{book1, book2, book3});
		System.out.println(instructor.getMostRecentBookTitle());
		System.out.println("old book title: " + instructor.updateBook(1, "Data Mining").getTitle());
				
		Book book4 = new Book("IR");
		System.out.println("old book title: " + instructor.updateBook(1, book4).getTitle());
		
	}
}



The variable s is of type short where as the method's return type is byte. So, here s is of larger type and the method is not applying a 
type cast and so will result in a compilation error. Correct return statement would be: return (byte) s;
Question 7:
Select the correct answer for the below method definition:

byte go() {

short s = 10;

return s;

}


This gives a compiler error as the first argument is invalid. This kind of an array initialization is valid only in an array declaration 
and cannot be used in method invocation. You cannot even use it for array re-initialization. You will have to invoke in this way: 
search(new int[] {1, 2, 3}, 2);
Question 8:
For the below method definition, select the wrong method invocation statement:

int search(int[] list, int key) {

...

}


The variable s is of type short where as the method's return type is byte. So, here s is of larger type and the method is not applying a 
type cast and so will result in a compilation error. Correct return statement would be: return (byte) s;
Question 7:
Select the correct answer for the below method definition:

byte go() {

short s = 10;

return s;

}


This gives a compiler error as the first argument is invalid. This kind of an array initialization is valid only in an array declaration 
and cannot be used in method invocation. You cannot even use it for array re-initialization. You will have to invoke in this way: 
search(new int[] {1, 2, 3}, 2);


Important Q&A Discussions!
Below are important Question & Answers taken from the Q&A discussions in this section.

Q1. What is  Algorithm complexity?

It is related to algorithm complexity and it comes from the field of Algorithms and is one of the first things taught in an algorithm 
course. It is often referred to as "asymptotic analysis". It is difficult to explain the concepts here, but I will give a very high-level idea. "O" is referred to as Big-Oh notation and it tells how an algorithm performs in the worst-case. Generally, if you design an algorithm, then one might ask you what the complexity of the algorithm is to get an idea of how it works. N in the parenthesis is the input size. O(N) means linear complexity. For instance to search an element in a list of 1000 elements (N is 1000), one way is to scan the elements from the beginning until the element is found or you don't find the element. In the worst-case, the element you are searching may not be there or it may be the 1000th element. This search might take some time. Now, if N is 10000 or 1 million, then your worst-case search time also grows linearly with the input size. In this case, your algorithm is doing a naive lookup of one item at a time. But, some other algorithm might do it in a better way. One example is hash algorithm, which we will see in Collections Framework chapter. Here the elements are stored in some special way (via a technique called hashing) and when you search for an element, it would return the element almost instantly. Here it doesn't matter whether your N is 1000 or 10k or 1 million, it will almost always take the same amount of time to find whether your element is there in the list or not. In this case, the complexity is said to be O(1) ~ it is referred to as constant time, i.e., performance is constant regardless of the size of the data. Now, if your data is sorted and if an algorithm like binary search is applied, then the complexity would be logarithmic, i.e., O(log(n)), which is better than O(N), but worse than O(1), i.e., when you move from 1000 elements to 10k, the time would not grow as significantly as an O(N) algorithm. There are also other complexities like quadratic ~ O(N2), cubic ~ O(N3), which are even worse. Here N2 is N raised to the power of 2 and same applies to N3.

At some point, I will definitely try to add a bonus lecture on this topic. You may want to get a high-level understanding of algorithm 
complexity when you get to Section 15 (Collections Framework), which deals with data structures and we will be seeing how different data 
structures perform. Generally, if you are into Web development and stuff like that you may never have to worry that much about them. But,
 if you are into algorithm development, then understanding of algorithm complexity is a MUST and you will definitely encounter some 
 questions on it in the interview. But, even for Web development, I would recommend to have a basic understanding of it.

You can also read about it from the following link, which describes these concepts in a pretty simple way. I read it long time back and I 
felt it was explained in a very simple way ~ generally in many cases it is explained in not so easy way as authors get into some math 
behind these concepts. But, below article should give you a better idea. It is also a good online Java book and so you can bookmark it.

http://math.hws.edu/javanotes/c8/s5.html

Q2. How can I draw a java smiley using utf 16 code in eclipse as all I am getting is a square in the eclipse editor.


char CharacterUnicodeDemo='\uE056';

I am not sure about that character. But, try '\u263A'. Ensure the following too:

1. In Eclipse, go to Window -> Preferences -> General -> Workspace -> Text File Encoding -> Other (UTF-8)

2. Font selection: In Eclipse, go to Window -> Preferences -> General -> Appearance -> Colors and Fonts -> Console Font -> Click Edit 
button and select "Segoe UI Symbol" in Font and hit ok -> hit apply and try running the program. If you don't see "Segoe UI Symbol", click
 on See more fonts and see if you can find it. If you still cannot find it try 3rd step

3. Control Panel --> Fonts --> Font settings -> Ensure 'Hide fonts based on language settings' is disabled and hit ok. Now, restart 
Eclipse and do step 2 above to see if "Segoe UI Symbol" can be seen



For me it did print a smiley after following the above steps. Hope that helps. Essentially, you need to have the font selected for your 
eclipse that supports those smileys.

References:

http://paranoid-engineering.blogspot.com/2008/05/getting-unicode-output-in-eclipse.html

https://stackoverflow.com/questions/1799458/display-the-unicode-value-in-the-java-screen

https://superuser.com/questions/336197/unicode-characters-suddenly-start-displaying-as-boxes-in-some-applications

https://stackoverflow.com/questions/44337894/what-is-the-microsoft-office-smiley-face-character-really

Some definitions:

Font: A font is a digital file which is used to display a typeface, which contains the entire upper- and lowercase alphabet as well as 
punctuation, numbers, and other special characters. 

Glyph: A glyph is an image, usually stored in a font (which is a collection of glyphs).

Excellent Reference on these definitions: https://stackoverflow.com/questions/27331819/whats-the-difference-between-a-character-a-code-point-a-glyph-and-a-grapheme

Q3. If every statement in Java ends with a semicolon then how can a if  condition called a control flow "statement" since it does not ends
 with a  semicolon?

The most likely reason is the ending brace } implicitly signals the end of the statement. Below is a good post discussing this.

https://stackoverflow.com/questions/5561869/why-semicolon-is-not-required-after-a-curled-bracket

Q4. You mentioned that the integer range is related to the bit depth. Please explain how we get range from the bit depth.

Let's consider byte whose bit-depth is 8. With 8 bits you can represent 256 numbers (2 raised to 8). And these 256 numbers fall in the 
range -128 to +127 including 0. In binary, whether a number is +ve or –ve is represented by 1 bit (called sign bit), which would be the 
most significant bit and it appears on the left most end; the remaining 7 bits indicate the magnitude of the number. That’s the reason the
 range says -2 raised to 7 to 2 raised to 7 – 1 (i.e., -128 to +127).

Q5. why byte is first converted to int and then to char? why is this intermediate conversion to int is required?

byte's bit-depth is smaller than char's. So, we need to widen it. Next question could be why not widen to short instead of int? I don't 
know the reason for that as it is not documented and I never came across an answer for that. Below are two guesses and I may be wrong:

1. They perhaps wanted to widen it to the next higher type who range covers char. short does not do that and int does and so it is widened
 to int via sign-extension (i.e., widening) and then int is then narrowed down to char. Below is what Java language specification has to 
 say and below is the link too.



First, the byte is converted to an int via widening primitive conversion (§5.1.2), and then the resulting int is converted to a char by 
narrowing primitive conversion



https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.4



2. When dealing with arithmetic operations, we have operand promotion rule (discussed in next section) where operands smaller than int are
 promoted to int. May be for consistency sake they are doing the same.



Q6. (This is a re-phrased question to give more clarity on Arrays). In a single application, can we have 1D, 2D and 3D arrays representing same data?

Answer: Yes. With each added dimension, the corresponding array would provide more details. Let's pick the same use-case we saw in 3D 
arrays lecture where we were capturing # units sold for 4 products (TV, Laptop, iPad, iPhone) across different months and cities. Let's 
assume we have these 4 products that are sold by a particular retail store and lets say the # units sold in first Quarter is represented 
in the following 1D array.

int[] itemsSoldByQuarter = {1000, 2000, 3000, 4000}; // 1000 TVs, 2000 Laptop, ...

Now, let's say we want to view the above data on a month-by-month basis that make up the first quarter, which includes January, February,
 and March. So, month is a new dimension and so the above data when represented in 2D array would be as follows. Note the variable names 
 I am using too.

int[][] itemsSoldByMonth = {

                                               {350, 700, 1000, 1000}, <--- Jan sales

                                               {350, 700, 1000, 2500}, <--- Feb sales

                                               {300, 600, 1000, 500}

                                             }

If you sum up the first column 350 (# TVs sold in Jan) + 350 (# TVs sold in Feb) + 300 (# TVs sold in Mar), you get 1000, which is what 
the total sales of TVs was for first quarter in the 1D array.

Now, let's add one more dimension. Let's say this store operates in two cities: San Francisco & New York and the above two array represent
 the sales across both cities combined. Now, by adding one more dimension, we can represent the sales of each product, for each month by 
 city. So, the 3D array looks as follows:

int[][][] itemsSoldByMonthAndCity = {

                                                              { <-- Jan

                                                                 {150, 300, 500, 800}, <--- Jan sales in San Francisco

                                                                 {200, 400, 500, 200} <--- Jan sales in New York

                                                              },

                                                              { <-- Feb

                                                                 {100, 300, 200, 1000}, <--- Feb sales in San Francisco

                                                                 {250, 400, 800, 1500} <--- Feb sales in New York

                                                             },

                                                             { <-- Mar

                                                                {100, 400, 300, 200}, <--- Mar sales in San Francisco

                                                                {200, 200, 700, 300} <--- Mar sales in New York

                                                             }

                                                           }

Now, in this 3D array, if you add up the the values in first column, it amounts to 1000, which is the #TVs sold in total (first element in
 1D array above). If you add just the 0th element in inner arrays representing Jan sales in both the cities, you have 150 & 200 
 (emphasized in bold) and you get 350, which is the #TVs sold in Jan across both cities, which is itemsSoldByMonth[0][0] in the 2D array.

Hope it is clear now. If required, just brainstorm a bit more on this and it should get clear.

Q7. Is there any specific reason for this() statement to be first? 

Answer: The main reason is to do with inheritance, which is  discussed in OOPS-related sections few sections from here. There you  come 
across the concept of super class & subclass where subclass  extends super class and inherits properties (e.g., certain variables  & 
methods) of super class. So, a super class object should  first be constructed before a subclass object is constructed.  Otherwise, 
subclass object can inherit variables that are not  initialized in super class, which is meaningless. To make this work  properly, super 
class constructors are invoked from the sub-class  constructors by using a super() call (can be done by compiler too, but  let's not worry
 about this as this will be clear when we get to  inheritance)

So, coming to your question, if you have a this()  statement as first one, then it would invoke another constructor, which  in turn 
invokes the super class constructor via super() thus ALWAYS  ensuring that super class object is fully constructed before subclass  
object.

Below post is relevant and I found the user Randa Sbeity's  answer useful. However, this restriction is not that popular as  discussed in
 few answers in the below post (including language  designers) and why that is the case is not entirely clearly to me at  this point --
 probably requires to do much more in-depth reading.

https://stackoverflow.com/questions/1168345/why-do-this-and-super-have-to-be-the-first-statement-in-a-constructor


Evaluation proceeds in this way: (9 * 5) - (97/5.0) --> (45 - (97.0/5.0)) --> 45 - 19.4
Question 3:
What will the expression 9 * 5 - 'a' / 5.0 evaluate to? For this, you need to first know the decimal equivalent of 'a' in UTF 16. Try to get the answer without writing code (you can use calculator).




Note on Student Class
In the next couple of lectures, we make use of an older version of Student class. It is just a simple version of the current one that we have written in the last section. Below is that class and it just has fewer variables. So, just do not be surprised on seeing it. It is also not the main program and is shown just for couple of seconds.

class Student {
    // variable declarations
    int id; 
    String name; 
    String gender = "male";
	
    // Constructors
    Student(int id, String name) {
        this(name); // Invoking overloaded constructor. If present, should be first statement
	this.id = id;
    }
	
    Student(String name) {
	this.name = name;
    }
	
    // method definitions
    boolean updateProfile(String name) {
        this.name = name;
        return true;
    }
}


public Initializers () {
	    System.out.println("Inside no-arg constructor ...");
	}
	
	public Initializers (int id) {
	    System.out.println("Inside constructor with a parameter ...");
	}
	
	{
	    System.out.println("Inside instance initializer ...");
	}
	
Inside instance initializer ...
Inside constructor with a parameter ...

